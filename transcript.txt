    

Setup:
Check connection to aws.amazon.com is fine.
Apply AWS account
Install Python 2.6 or later
Install pip (sudo easy_install pip)
Setup SSH identity for GitHub (either ssh or https is fine)

Preparation:
Create two Drupal CloudFormation stacks because it takes long time to start.

Instructions:
Check whether everyone has AWS account, show the AWS management console.
Show billing management page.
Show the security credential page, create a new access key, remember the secret access key.
Check security group, and create a new security group.
Configure the security group to allow SSH protocol.
Create a new key pair (aws-workshop) and download the pem file.
Launch a EC2 instance with specific security group and key pair. Add a tag (Name=Foo) to it for reference.
SSH to the new created instance. (Select the instance and check the Connect button, it will show the steps to connect).


Introduction to CloudFormation
Show the CloudFormation templates, Drupal website template http://aws.amazon.com/cloudformation/aws-cloudformation-templates/
Download the template file, make some changes to add default values.
Create a CloudFormation by uploading the template file.
Check the output for url and open it.
Modify the template with different value
Create another CloudFormation by uploading the updated template file.
Check the output for url and open it, show the difference.

Introduction to Elastic Load Balancer
Create a ELB and add the two Drupal instances.
Using the default healthy check url, and show that the services are not healthy.
Update the healthy check url to (/themes/bartik/logo.png), and show the services are back to normal.
Check the ELB url and refresh it for several times and see different pages are served.

Introduction to Ansible
Install Ansible from github
    sudo easy_install pip
    sudo pip install paramiko PyYAML jinja2
    git clone git@github.com:ansible/ansible.git
    cd ./ansible
    source ./hacking/env-setup
    echo "127.0.0.1" > ~/ansible_hosts
    enable Remote Login in Mac System Preference -> Sharing
    cat ~/.ssh/id_rsa.pub > ~/.ssh/authorized_keys
    ansible all -i ~/ansible_hosts -m ping —private-key=~/.ssh/id_rsa --ask-pass 

Config AWS and Ansible
export AWS_ACCESS_KEY_ID=“*"
export AWS_SECRET_ACCESS_KEY=“*"
export AWS_KEY_ID=“*"
export EC2_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
export EC2_SECRET_KEY=${AWS_SECRET_ACCESS_KEY}
#export EC2_REGION=us-east-1
#export EC2_URL=https://ec2.amazonaws.com
#export S3_URL=https://s3.amazonaws.com:443

# Ansible Config
export ANSIBLE_HOST_KEY_CHECKING=false

Create a Ansible host file for EC2
    [local]
    localhost
Ping EC2 instances with Ansible command
    ansible -i ~/src/ansible/plugins/inventory/ec2.py --private-key=~/.ssh/aws-workshop.pem -u ec2-user -m ping us-east-1


Create 2 new EC2 instances with Ansible
    ansible localhost -i ~/ansible_hosts -m ec2 -a "image=ami-83e4bcea instance_type=t1.micro region=us-east-1 keypair=aws-workshop count=2 wait=yes" -c local
Ping EC2 instances with Ansible command
    ansible -i ~/src/ansible/plugins/inventory/ec2.py --private-key=~/.ssh/aws-workshop.pem -u ec2-user -m ping us-east-1
Create EC2 instances and tag them with playbook
    ansible-playbook -i ~/ansible_hosts --private-key=~/.ssh/aws-workshop.pem Launch_EC2_Instance_With_Tags.yaml
Use tag host pattern to ping EC2 host
    ansible -i ~/src/ansible/plugins/inventory/ec2.py --private-key=~/.ssh/aws-workshop.pem -u ec2-user -m ping tag_Name_Foo
Destroy those 2 EC2 instances
    ansible localhost -i ~/ansible_hosts -m ec2 -a "state=absent region=us-east-1 keypair=aws-workshop wait=no instance_ids=i-04ea2860,i-06ea2862,i-539f252a,i-5d9f2524" -c local

Create a CloudFormation stack with Ansible
    ansible-playbook -i ~/ansible_hosts --private-key=~/.ssh/aws-workshop.pem DrupalCloudFormation.yaml
Add the new stack to the load balancer we created before.
    ansible localhost -i ~/ansible_hosts -m ec2_elb -a "ec2_elbs=myelb instance_id=i-32165754 region=us-east-1 state=present wait=yes" -c local
Remove the stack from the load balancer
    ansible localhost -i ~/ansible_hosts -m ec2_elb -a "ec2_elbs=myelb instance_id=i-32165754 region=us-east-1 state=absent wait=yes" -c local
Delete CloudFormation stack with Ansible
    ansible localhost -i ~/ansible_hosts -m cloudformation -a "stack_name=ForthDrupal region=us-east-1 state=absent template=Drupal_Single_Instance.template template_parameters='{}'" -c local

